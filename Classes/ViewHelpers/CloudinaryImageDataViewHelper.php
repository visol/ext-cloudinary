<?php

namespace Sinso\Cloudinary\ViewHelpers;

/*
 * This file is part of the Sinso/Cloudinary project under GPLv2 or later.
 *
 * For the full copyright and license information, please read the
 * LICENSE.md file that was distributed with this source code.
 */

use Sinso\Cloudinary\Utility\CloudinaryPathUtility;
use TYPO3\CMS\Core\Resource\Exception\ResourceDoesNotExistException;
use TYPO3\CMS\Core\Resource\FileInterface;
use TYPO3\CMS\Core\Resource\FileReference;

/**
 * Class CloudinaryImageDataViewHelper
 */
class CloudinaryImageDataViewHelper extends \TYPO3\CMS\Fluid\Core\ViewHelper\AbstractViewHelper
{

    /**
     * @var \TYPO3\CMS\Extbase\Service\ImageService
     */
    protected $imageService;

    /**
     * @var \Sinso\Cloudinary\Utility\CloudinaryUtility
     * @inject
     */
    protected $cloudinaryUtility;

    /**
     * @param \TYPO3\CMS\Extbase\Service\ImageService $imageService
     */
    public function injectImageService(\TYPO3\CMS\Extbase\Service\ImageService $imageService)
    {
        $this->imageService = $imageService;
    }

    /**
     * @param \Sinso\Cloudinary\Utility\CloudinaryUtility $cloudinaryUtility
     */
    public function injectCloudinaryUtility(\TYPO3\CMS\Extbase\Service\ImageService $cloudinaryUtility)
    {
        $this->cloudinaryUtility = $cloudinaryUtility;
    }

    /**
     * @return void
     */
    public function initializeArguments(): void
    {

        $this->registerArgument('src', 'string', 'a path to a file, a combined FAL identifier or an uid (int). If $treatIdAsReference is set, the integer is considered the uid of the sys_file_reference record. If you already got a FAL object, consider using the $image parameter instead')
            ->registerArgument('minWidth', 'int', 'minimum width of the image', false, 100)
            ->registerArgument('maxWidth', 'int', 'maximum width of the image', false, 2000)
            ->registerArgument('maxImages', 'int', 'maximum amount of images generated by Cloudinary', false, 10)
            ->registerArgument('bytesStep', 'int', 'difference between filesizes of images generated by Cloudinary', false, 40000)
            ->registerArgument('aspectRatio', 'string', 'difference between filesizes of images generated by Cloudinary')
            ->registerArgument('gravity', 'string', 'define the focus for the transformation in Cloudinary')
            ->registerArgument('crop', 'string', 'define cropping for Cloudinary')
            ->registerArgument('treatIdAsReference', 'bool', 'given src argument is a sys_file_reference record', false)
            ->registerArgument('image', FileInterface::class, 'a FAL object')
            ->registerArgument('options', 'array', 'Possible cloudinary options to transform / crop the image', false, [])
            ->registerArgument('data', 'string', 'Name for variable with responsive image data within the viewhelper', false, 'responsiveImageData');
    }

    /**
     * Resizes a given image (if required) and renders the respective img tag
     * @return string Rendered tag
     */
    public function render(): string
    {
        $src = $this->arguments['src'];
        $image = $this->arguments['image'];

        if (is_null($src) && is_null($image) || !is_null($src) && !is_null($image)) {
            throw new \TYPO3\CMS\Fluid\Core\ViewHelper\Exception('You must either specify a string src or a File object.', 1382284106);
        }

        if (!is_int($src)) {
            $parsedUrl = parse_url($src);
            $src = $parsedUrl['path'];
        }

        $responsiveImageData = [];

        try {

            /** @var FileInterface $image */
            $image = $this->imageService->getImage(
                $src,
                $image,
                $this->arguments['treatIdAsReference']
            );

            $preCrop = $image instanceof FileReference ? $image->getProperty('crop') : null;
            $processingInstructions = [
                'crop' => $preCrop,
            ];
            $processedImage = $this->imageService->applyProcessingInstructions($image, $processingInstructions);
            $imageUri = $this->imageService->getImageUri($processedImage);

            try {
                // decode URLs from RealURL
                $imageUri = rawurldecode($imageUri);

                $publicId = CloudinaryPathUtility::computeCloudinaryPublicId($image->getIdentifier());

                $options = $this->cloudinaryUtility->generateOptionsFromSettings(
                    [
                        'bytesStep' => $this->arguments['bytesStep'],
                        'minWidth' => $this->arguments['minWidth'],
                        'maxWidth' => $this->arguments['maxWidth'],
                        'maxImages' => $this->arguments['maxImages'],
                        'aspectRatio' => $this->arguments['aspectRatio'],
                        'gravity' => $this->arguments['gravity'],
                        'crop' => $this->arguments['crop'],
                    ]
                );

                // True means process with default options
                // False means we have a cloudinary $options override
                if (empty($this->arguments['options'])) {
                    $breakpoints = $this->cloudinaryUtility->getResponsiveBreakpointData($publicId, $options);
                } else {
                    // Apply custom transformation to breakpoint images
                    $options['responsive_breakpoints']['transformation'] = $this->arguments['options'];
                    $breakpoints = $this->cloudinaryUtility->getResponsiveBreakpointData($publicId, $options);
                }

                $responsiveImageData = [
                    'images' => $this->cloudinaryUtility->getImageObjects($breakpoints),
                    'minImage' => $this->cloudinaryUtility->getImage($breakpoints, 'min'),
                    'medianImage' => $this->cloudinaryUtility->getImage($breakpoints, 'median'),
                    'maxImage' => $this->cloudinaryUtility->getImage($breakpoints, 'max'),
                ];
            } catch (\Exception $e) {
                $responsiveImageData = [
                    'images' => [
                        1 => [
                            'width' => 1,
                            'height' => 1,
                            'url' => $imageUri,
                            'secure_url' => $imageUri,
                        ]
                    ],
                    'minImage' => $imageUri,
                    'medianImage' => $imageUri,
                    'maxImage' => $imageUri,
                ];
            }
        } catch (ResourceDoesNotExistException $e) {
            // thrown if file does not exist
        } catch (\UnexpectedValueException $e) {
            // thrown if a file has been replaced with a folder
        } catch (\RuntimeException $e) {
            // RuntimeException thrown if a file is outside of a storage
        } catch (\InvalidArgumentException $e) {
            // thrown if file storage does not exist
        }

        $data = $this->arguments['data'];
        $this->templateVariableContainer->add($data, $responsiveImageData);
        $output = $this->renderChildren();
        $this->templateVariableContainer->remove($data);

        return is_string($output)
            ? $output
            : '';
    }
}
